// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Person.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Person TABLE
class TablePerson extends SqfEntityTableBase {
  TablePerson() {
    // declare properties of EntityTable
    tableName = 'persons';
    primaryKeyName = 'personId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('firstName', DbType.text, isNotNull: true),
      SqfEntityFieldBase('lastName', DbType.text, isNotNull: true),
      SqfEntityFieldBase('password', DbType.text, isNotNull: true),
      SqfEntityFieldBase('email', DbType.text, isUnique: true, isNotNull: true),
      SqfEntityFieldBase('createdDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePerson();
  }
}

// Task TABLE
class TableTask extends SqfEntityTableBase {
  TableTask() {
    // declare properties of EntityTable
    tableName = 'tasks';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('dueDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('isCompleted', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('allDayTask', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('createdDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(
          TablePerson.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'personId',
          defaultValue: 1),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTask();
  }
}

// Reminder TABLE
class TableReminder extends SqfEntityTableBase {
  TableReminder() {
    // declare properties of EntityTable
    tableName = 'reminders';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('reminderDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('reminderType', DbType.integer),
      SqfEntityFieldBase('createdDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedDate', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(TableTask.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'taskId',
          defaultValue: 1),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableReminder();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class TaskModel extends SqfEntityModelProvider {
  TaskModel() {
    databaseName = model.databaseName;
    password = model.password;
    dbVersion = model.dbVersion;
    preSaveAction = model.preSaveAction;
    logFunction = model.logFunction;
    databaseTables = [
      TablePerson.getInstance,
      TableTask.getInstance,
      TableReminder.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = model
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = model.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};
    controllers['persons'] = PersonController.getController;

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Person
class Person extends TableBase {
  Person(
      {this.personId,
      this.firstName,
      this.lastName,
      this.password,
      this.email,
      this.createdDate,
      this.updatedDate,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Person.withFields(this.firstName, this.lastName, this.password, this.email,
      this.createdDate, this.updatedDate, this.isDeleted) {
    _setDefaultValues();
  }
  Person.withId(this.personId, this.firstName, this.lastName, this.password,
      this.email, this.createdDate, this.updatedDate, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Person.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    personId = int.tryParse(o['personId'].toString());
    if (o['firstName'] != null) {
      firstName = o['firstName'].toString();
    }
    if (o['lastName'] != null) {
      lastName = o['lastName'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['createdDate'] != null) {
      createdDate = int.tryParse(o['createdDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdDate'].toString())!)
          : DateTime.tryParse(o['createdDate'].toString());
    }
    if (o['updatedDate'] != null) {
      updatedDate = int.tryParse(o['updatedDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedDate'].toString())!)
          : DateTime.tryParse(o['updatedDate'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Person)
  int? personId;
  String? firstName;
  String? lastName;
  String? password;
  String? email;
  DateTime? createdDate;
  DateTime? updatedDate;
  bool? isDeleted;

  // end FIELDS (Person)

// COLLECTIONS & VIRTUALS (Person)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTasks', 'plField2'..]) or so on..
  List<Task>? plTasks;

  /// get Task(s) filtered by personId=personId
  TaskFilterBuilder? getTasks(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (personId == null) {
      return null;
    }
    return Task()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .personId
        .equals(personId)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Person)

  static const bool _softDeleteActivated = true;
  PersonManager? __mnPerson;

  PersonManager get _mnPerson {
    return __mnPerson = __mnPerson ?? PersonManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['personId'] = personId;
    if (firstName != null || !forView) {
      map['firstName'] = firstName;
    }
    if (lastName != null || !forView) {
      map['lastName'] = lastName;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    } else if (createdDate != null || !forView) {
      map['createdDate'] = null;
    }
    if (updatedDate != null) {
      map['updatedDate'] = forJson
          ? updatedDate!.toString()
          : forQuery
              ? updatedDate!.millisecondsSinceEpoch
              : updatedDate;
    } else if (updatedDate != null || !forView) {
      map['updatedDate'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['personId'] = personId;
    if (firstName != null || !forView) {
      map['firstName'] = firstName;
    }
    if (lastName != null || !forView) {
      map['lastName'] = lastName;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    } else if (createdDate != null || !forView) {
      map['createdDate'] = null;
    }
    if (updatedDate != null) {
      map['updatedDate'] = forJson
          ? updatedDate!.toString()
          : forQuery
              ? updatedDate!.millisecondsSinceEpoch
              : updatedDate;
    } else if (updatedDate != null || !forView) {
      map['updatedDate'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Person)
    if (!forQuery) {
      map['Tasks'] = await getTasks()!.toMapList();
    }
// END COLLECTIONS (Person)

    return map;
  }

  /// This method returns Json String [Person]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Person]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      firstName,
      lastName,
      password,
      email,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      personId,
      firstName,
      lastName,
      password,
      email,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Person>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Person.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Person>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Person>[];
    try {
      objList = list
          .map((person) => Person.fromMap(person as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Person.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Person>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Person> objList = <Person>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Person.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('persons.plTasks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTasks'))) {
          /*_loadedfields!.add('persons.plTasks'); */ obj.plTasks =
              obj.plTasks ??
                  await obj.getTasks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Person by ID if exist, otherwise returns null
  /// Primary Keys: int? personId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Person] if exist, otherwise returns null
  Future<Person?> getById(int? personId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (personId == null) {
      return null;
    }
    Person? obj;
    final data = await _mnPerson.getById([personId]);
    if (data.length != 0) {
      obj = Person.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('persons.plTasks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTasks'))) {
          /*_loadedfields!.add('persons.plTasks'); */ obj.plTasks =
              obj.plTasks ??
                  await obj.getTasks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Person) object. If the personId field is null, saves as a new record and returns new personId, if personId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns personId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (personId == null || personId == 0) {
      personId = await _mnPerson.insert(this, ignoreBatch);
    } else {
      await _mnPerson.update(this);
    }

    return personId;
  }

  /// Saves the (Person) object. If the personId field is null, saves as a new record and returns new personId, if personId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns personId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (personId == null || personId == 0) {
      personId = await _mnPerson.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // personId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPerson.updateOrThrow(this);
    }

    return personId;
  }

  /// saveAs Person. Returns a new Primary Key value of Person

  /// <returns>Returns a new Primary Key value of Person
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    personId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Person> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Person> persons,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await TaskModel().batchStart();
    for (final obj in persons) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await TaskModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < persons.length; i++) {
        if (persons[i].personId == null) {
          persons[i].personId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns personId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnPerson.rawInsert(
          'INSERT OR REPLACE INTO persons (personId, firstName, lastName, password, email, createdDate, updatedDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
          [
            personId,
            firstName,
            lastName,
            password,
            email,
            createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
            updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Person personId=$personId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Person personId=$personId did not update');
      }
      return personId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Person Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Person>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Person> persons,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnPerson.rawInsertAll(
        'INSERT OR REPLACE INTO persons (personId, firstName, lastName, password, email, createdDate, updatedDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        persons,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Person

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Person invoked (personId=$personId)');
    var result = BoolResult(success: false);
    {
      result = await Task()
          .select()
          .personId
          .equals(personId)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnPerson.delete(
          QueryParams(whereString: 'personId=?', whereArguments: [personId]));
    } else {
      return _mnPerson.updateBatch(
          QueryParams(whereString: 'personId=?', whereArguments: [personId]),
          {'isDeleted': 1});
    }
  }

  /// Recover Person

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Person invoked (personId=$personId)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Task()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .personId
          .equals(personId)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnPerson.updateBatch(
          QueryParams(whereString: 'personId=?', whereArguments: [personId]),
          {'isDeleted': 0});
    }
  }

  @override
  PersonFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PersonFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  PersonFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PersonFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      personId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion person

// region PersonField
class PersonField extends FilterBase {
  PersonField(PersonFilterBuilder personFB) : super(personFB);

  @override
  PersonFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder isNull() {
    return super.isNull() as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as PersonFilterBuilder;
  }

  @override
  PersonField get not {
    return super.not as PersonField;
  }
}
// endregion PersonField

// region PersonFilterBuilder
class PersonFilterBuilder extends ConjunctionBase {
  PersonFilterBuilder(Person obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnPerson = obj._mnPerson;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  PersonManager? _mnPerson;

  /// put the sql keyword 'AND'
  @override
  PersonFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  PersonFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  PersonFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  PersonFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  PersonFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  PersonFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  PersonFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PersonFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PersonFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PersonFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PersonFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  PersonField _setField(PersonField? field, String colName, DbType dbtype) {
    return PersonField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  PersonField? _personId;
  PersonField get personId {
    return _personId = _setField(_personId, 'personId', DbType.integer);
  }

  PersonField? _firstName;
  PersonField get firstName {
    return _firstName = _setField(_firstName, 'firstName', DbType.text);
  }

  PersonField? _lastName;
  PersonField get lastName {
    return _lastName = _setField(_lastName, 'lastName', DbType.text);
  }

  PersonField? _password;
  PersonField get password {
    return _password = _setField(_password, 'password', DbType.text);
  }

  PersonField? _email;
  PersonField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  PersonField? _createdDate;
  PersonField get createdDate {
    return _createdDate =
        _setField(_createdDate, 'createdDate', DbType.datetime);
  }

  PersonField? _updatedDate;
  PersonField get updatedDate {
    return _updatedDate =
        _setField(_updatedDate, 'updatedDate', DbType.datetime);
  }

  PersonField? _isDeleted;
  PersonField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Person> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Task) according to DeleteRule.CASCADE
    final idListTaskBYpersonId = toListPrimaryKeySQL(false);
    final resTaskBYpersonId = await Task()
        .select()
        .where('personId IN (${idListTaskBYpersonId['sql']})',
            parameterValue: idListTaskBYpersonId['args'])
        .delete(hardDelete);
    if (!resTaskBYpersonId.success) {
      return resTaskBYpersonId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnPerson!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnPerson!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Person> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Person bulk invoked');
    // Recover sub records where in (Task) according to DeleteRule.CASCADE
    final idListTaskBYpersonId = toListPrimaryKeySQL(false);
    final resTaskBYpersonId = await Task()
        .select()
        .where('personId IN (${idListTaskBYpersonId['sql']})',
            parameterValue: idListTaskBYpersonId['args'])
        .update({'isDeleted': 0});
    if (!resTaskBYpersonId.success) {
      return resTaskBYpersonId;
    }
    return _mnPerson!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'personId IN (SELECT personId from persons ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnPerson!.updateBatch(qparams, values);
  }

  /// This method always returns [Person] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Person?
  @override
  Future<Person?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnPerson!.toList(qparams);
    final data = await objFuture;
    Person? obj;
    if (data.isNotEmpty) {
      obj = Person.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('persons.plTasks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTasks'))) {
          /*_loadedfields!.add('persons.plTasks'); */ obj.plTasks =
              obj.plTasks ??
                  await obj.getTasks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Person]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Person?
  @override
  Future<Person> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Person();
  }

  /// This method returns int. [Person]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? personCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final personsFuture = await _mnPerson!.toList(qparams);
    final int count = personsFuture[0]['CNT'] as int;
    if (personCount != null) {
      personCount(count);
    }
    return count;
  }

  /// This method returns List<Person> [Person]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Person>
  @override
  Future<List<Person>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Person> personsData = await Person.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return personsData;
  }

  /// This method returns Json String [Person]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Person]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Person]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnPerson!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Person>>
  Future<List<DropdownMenuItem<Person>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Person>> o)?
          dropDownMenu]) async {
    buildParameters();
    final personsFuture = _mnPerson!.toList(qparams);

    final data = await personsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Person>> items = []..add(DropdownMenuItem(
        value: Person(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Person.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['personId', displayTextColumn];
    final personsFuture = _mnPerson!.toList(qparams);

    final data = await personsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['personId'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Person]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `personId` FROM persons WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> personIdData = <int>[];
    qparams.selectColumns = ['personId'];
    final personIdFuture = await _mnPerson!.toList(qparams);

    final int count = personIdFuture.length;
    for (int i = 0; i < count; i++) {
      personIdData.add(personIdFuture[i]['personId'] as int);
    }
    return personIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Person]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnPerson!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Person.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnPerson!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PersonFilterBuilder

// region PersonFields
class PersonFields {
  static TableField? _fPersonId;
  static TableField get personId {
    return _fPersonId = _fPersonId ??
        SqlSyntax.setField(_fPersonId, 'personid', DbType.integer);
  }

  static TableField? _fFirstName;
  static TableField get firstName {
    return _fFirstName = _fFirstName ??
        SqlSyntax.setField(_fFirstName, 'firstName', DbType.text);
  }

  static TableField? _fLastName;
  static TableField get lastName {
    return _fLastName =
        _fLastName ?? SqlSyntax.setField(_fLastName, 'lastName', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fCreatedDate;
  static TableField get createdDate {
    return _fCreatedDate = _fCreatedDate ??
        SqlSyntax.setField(_fCreatedDate, 'createdDate', DbType.datetime);
  }

  static TableField? _fUpdatedDate;
  static TableField get updatedDate {
    return _fUpdatedDate = _fUpdatedDate ??
        SqlSyntax.setField(_fUpdatedDate, 'updatedDate', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PersonFields

//region PersonManager
class PersonManager extends SqfEntityProvider {
  PersonManager()
      : super(TaskModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'persons';
  static const List<String> _primaryKeyList = ['personId'];
  static const String _whereStr = 'personId=?';
}

//endregion PersonManager
// region Task
class Task extends TableBase {
  Task(
      {this.id,
      this.title,
      this.description,
      this.dueDate,
      this.isCompleted,
      this.allDayTask,
      this.createdDate,
      this.updatedDate,
      this.personId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Task.withFields(
      this.title,
      this.description,
      this.dueDate,
      this.isCompleted,
      this.allDayTask,
      this.createdDate,
      this.updatedDate,
      this.personId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Task.withId(
      this.id,
      this.title,
      this.description,
      this.dueDate,
      this.isCompleted,
      this.allDayTask,
      this.createdDate,
      this.updatedDate,
      this.personId,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Task.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['dueDate'] != null) {
      dueDate = int.tryParse(o['dueDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dueDate'].toString())!)
          : DateTime.tryParse(o['dueDate'].toString());
    }
    if (o['isCompleted'] != null) {
      isCompleted = o['isCompleted'].toString() == '1' ||
          o['isCompleted'].toString() == 'true';
    }
    if (o['allDayTask'] != null) {
      allDayTask = o['allDayTask'].toString() == '1' ||
          o['allDayTask'].toString() == 'true';
    }
    if (o['createdDate'] != null) {
      createdDate = int.tryParse(o['createdDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdDate'].toString())!)
          : DateTime.tryParse(o['createdDate'].toString());
    }
    if (o['updatedDate'] != null) {
      updatedDate = int.tryParse(o['updatedDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedDate'].toString())!)
          : DateTime.tryParse(o['updatedDate'].toString());
    }
    personId = int.tryParse(o['personId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plPerson = o['person'] != null
        ? Person.fromMap(o['person'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Task)
  int? id;
  String? title;
  String? description;
  DateTime? dueDate;
  bool? isCompleted;
  bool? allDayTask;
  DateTime? createdDate;
  DateTime? updatedDate;
  int? personId;
  bool? isDeleted;

  // end FIELDS (Task)

// RELATIONSHIPS (Task)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plPerson', 'plField2'..]) or so on..
  Person? plPerson;

  /// get Person By PersonId
  Future<Person?> getPerson(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Person().getById(personId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Task)

// COLLECTIONS & VIRTUALS (Task)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plReminders', 'plField2'..]) or so on..
  List<Reminder>? plReminders;

  /// get Reminder(s) filtered by id=taskId
  ReminderFilterBuilder? getReminders(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Reminder()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .taskId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Task)

  static const bool _softDeleteActivated = true;
  TaskManager? __mnTask;

  TaskManager get _mnTask {
    return __mnTask = __mnTask ?? TaskManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (dueDate != null) {
      map['dueDate'] = forJson
          ? dueDate!.toString()
          : forQuery
              ? dueDate!.millisecondsSinceEpoch
              : dueDate;
    } else if (dueDate != null || !forView) {
      map['dueDate'] = null;
    }
    if (isCompleted != null) {
      map['isCompleted'] = forQuery ? (isCompleted! ? 1 : 0) : isCompleted;
    } else if (isCompleted != null || !forView) {
      map['isCompleted'] = null;
    }
    if (allDayTask != null) {
      map['allDayTask'] = forQuery ? (allDayTask! ? 1 : 0) : allDayTask;
    } else if (allDayTask != null || !forView) {
      map['allDayTask'] = null;
    }
    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    } else if (createdDate != null || !forView) {
      map['createdDate'] = null;
    }
    if (updatedDate != null) {
      map['updatedDate'] = forJson
          ? updatedDate!.toString()
          : forQuery
              ? updatedDate!.millisecondsSinceEpoch
              : updatedDate;
    } else if (updatedDate != null || !forView) {
      map['updatedDate'] = null;
    }
    if (personId != null) {
      map['personId'] = forView
          ? plPerson == null
              ? personId
              : plPerson!.firstName
          : personId;
    } else if (personId != null || !forView) {
      map['personId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (dueDate != null) {
      map['dueDate'] = forJson
          ? dueDate!.toString()
          : forQuery
              ? dueDate!.millisecondsSinceEpoch
              : dueDate;
    } else if (dueDate != null || !forView) {
      map['dueDate'] = null;
    }
    if (isCompleted != null) {
      map['isCompleted'] = forQuery ? (isCompleted! ? 1 : 0) : isCompleted;
    } else if (isCompleted != null || !forView) {
      map['isCompleted'] = null;
    }
    if (allDayTask != null) {
      map['allDayTask'] = forQuery ? (allDayTask! ? 1 : 0) : allDayTask;
    } else if (allDayTask != null || !forView) {
      map['allDayTask'] = null;
    }
    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    } else if (createdDate != null || !forView) {
      map['createdDate'] = null;
    }
    if (updatedDate != null) {
      map['updatedDate'] = forJson
          ? updatedDate!.toString()
          : forQuery
              ? updatedDate!.millisecondsSinceEpoch
              : updatedDate;
    } else if (updatedDate != null || !forView) {
      map['updatedDate'] = null;
    }
    if (personId != null) {
      map['personId'] = forView
          ? plPerson == null
              ? personId
              : plPerson!.firstName
          : personId;
    } else if (personId != null || !forView) {
      map['personId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Task)
    if (!forQuery) {
      map['Reminders'] = await getReminders()!.toMapList();
    }
// END COLLECTIONS (Task)

    return map;
  }

  /// This method returns Json String [Task]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Task]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      title,
      description,
      dueDate != null ? dueDate!.millisecondsSinceEpoch : null,
      isCompleted,
      allDayTask,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
      personId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      title,
      description,
      dueDate != null ? dueDate!.millisecondsSinceEpoch : null,
      isCompleted,
      allDayTask,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
      personId,
      isDeleted
    ];
  }

  static Future<List<Task>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Task.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Task>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Task>[];
    try {
      objList = list
          .map((task) => Task.fromMap(task as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Task.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Task>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Task> objList = <Task>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Task.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tasks.plReminders') && */ (preloadFields ==
                null ||
            preloadFields.contains('plReminders'))) {
          /*_loadedfields!.add('tasks.plReminders'); */ obj.plReminders =
              obj.plReminders ??
                  await obj.getReminders()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plPerson'))) {
          obj.plPerson =
              obj.plPerson ?? await obj.getPerson(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Task by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Task] if exist, otherwise returns null
  Future<Task?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Task? obj;
    final data = await _mnTask.getById([id]);
    if (data.length != 0) {
      obj = Task.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tasks.plReminders') && */ (preloadFields ==
                null ||
            preloadFields.contains('plReminders'))) {
          /*_loadedfields!.add('tasks.plReminders'); */ obj.plReminders =
              obj.plReminders ??
                  await obj.getReminders()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plPerson'))) {
          obj.plPerson =
              obj.plPerson ?? await obj.getPerson(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Task) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTask.insert(this, ignoreBatch);
    } else {
      await _mnTask.update(this);
    }

    return id;
  }

  /// Saves the (Task) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTask.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTask.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Task. Returns a new Primary Key value of Task

  /// <returns>Returns a new Primary Key value of Task
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Task> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Task> tasks,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await TaskModel().batchStart();
    for (final obj in tasks) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await TaskModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tasks.length; i++) {
        if (tasks[i].id == null) {
          tasks[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTask.rawInsert(
          'INSERT OR REPLACE INTO tasks (id, title, description, dueDate, isCompleted, allDayTask, createdDate, updatedDate, personId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            title,
            description,
            dueDate != null ? dueDate!.millisecondsSinceEpoch : null,
            isCompleted,
            allDayTask,
            createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
            updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
            personId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Task id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Task id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Task Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Task>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Task> tasks,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTask.rawInsertAll(
        'INSERT OR REPLACE INTO tasks (id, title, description, dueDate, isCompleted, allDayTask, createdDate, updatedDate, personId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        tasks,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Task

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Task invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Reminder().select().taskId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTask
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTask.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Task

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Task invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Reminder()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .taskId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnTask.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  TaskFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TaskFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TaskFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TaskFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isCompleted = isCompleted ?? false;
    allDayTask = allDayTask ?? false;
    personId = personId ?? 1;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion task

// region TaskField
class TaskField extends FilterBase {
  TaskField(TaskFilterBuilder taskFB) : super(taskFB);

  @override
  TaskFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder isNull() {
    return super.isNull() as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TaskFilterBuilder;
  }

  @override
  TaskFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TaskFilterBuilder;
  }

  @override
  TaskField get not {
    return super.not as TaskField;
  }
}
// endregion TaskField

// region TaskFilterBuilder
class TaskFilterBuilder extends ConjunctionBase {
  TaskFilterBuilder(Task obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnTask = obj._mnTask;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TaskManager? _mnTask;

  /// put the sql keyword 'AND'
  @override
  TaskFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TaskFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TaskFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TaskFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TaskFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TaskFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TaskFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TaskFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TaskFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TaskFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TaskFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TaskField _setField(TaskField? field, String colName, DbType dbtype) {
    return TaskField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TaskField? _id;
  TaskField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TaskField? _title;
  TaskField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  TaskField? _description;
  TaskField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  TaskField? _dueDate;
  TaskField get dueDate {
    return _dueDate = _setField(_dueDate, 'dueDate', DbType.datetime);
  }

  TaskField? _isCompleted;
  TaskField get isCompleted {
    return _isCompleted = _setField(_isCompleted, 'isCompleted', DbType.bool);
  }

  TaskField? _allDayTask;
  TaskField get allDayTask {
    return _allDayTask = _setField(_allDayTask, 'allDayTask', DbType.bool);
  }

  TaskField? _createdDate;
  TaskField get createdDate {
    return _createdDate =
        _setField(_createdDate, 'createdDate', DbType.datetime);
  }

  TaskField? _updatedDate;
  TaskField get updatedDate {
    return _updatedDate =
        _setField(_updatedDate, 'updatedDate', DbType.datetime);
  }

  TaskField? _personId;
  TaskField get personId {
    return _personId = _setField(_personId, 'personId', DbType.integer);
  }

  TaskField? _isDeleted;
  TaskField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Task> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Reminder) according to DeleteRule.CASCADE
    final idListReminderBYtaskId = toListPrimaryKeySQL(false);
    final resReminderBYtaskId = await Reminder()
        .select()
        .where('taskId IN (${idListReminderBYtaskId['sql']})',
            parameterValue: idListReminderBYtaskId['args'])
        .delete(hardDelete);
    if (!resReminderBYtaskId.success) {
      return resReminderBYtaskId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTask!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTask!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Task> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Task bulk invoked');
    // Recover sub records where in (Reminder) according to DeleteRule.CASCADE
    final idListReminderBYtaskId = toListPrimaryKeySQL(false);
    final resReminderBYtaskId = await Reminder()
        .select()
        .where('taskId IN (${idListReminderBYtaskId['sql']})',
            parameterValue: idListReminderBYtaskId['args'])
        .update({'isDeleted': 0});
    if (!resReminderBYtaskId.success) {
      return resReminderBYtaskId;
    }
    return _mnTask!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tasks ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTask!.updateBatch(qparams, values);
  }

  /// This method always returns [Task] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Task?
  @override
  Future<Task?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTask!.toList(qparams);
    final data = await objFuture;
    Task? obj;
    if (data.isNotEmpty) {
      obj = Task.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tasks.plReminders') && */ (preloadFields ==
                null ||
            preloadFields.contains('plReminders'))) {
          /*_loadedfields!.add('tasks.plReminders'); */ obj.plReminders =
              obj.plReminders ??
                  await obj.getReminders()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plPerson'))) {
          obj.plPerson =
              obj.plPerson ?? await obj.getPerson(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Task]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Task?
  @override
  Future<Task> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Task();
  }

  /// This method returns int. [Task]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? taskCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tasksFuture = await _mnTask!.toList(qparams);
    final int count = tasksFuture[0]['CNT'] as int;
    if (taskCount != null) {
      taskCount(count);
    }
    return count;
  }

  /// This method returns List<Task> [Task]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Task>
  @override
  Future<List<Task>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Task> tasksData = await Task.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tasksData;
  }

  /// This method returns Json String [Task]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Task]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Task]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTask!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Task]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tasks WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTask!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Task]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTask!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Task.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTask!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TaskFilterBuilder

// region TaskFields
class TaskFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fDueDate;
  static TableField get dueDate {
    return _fDueDate =
        _fDueDate ?? SqlSyntax.setField(_fDueDate, 'dueDate', DbType.datetime);
  }

  static TableField? _fIsCompleted;
  static TableField get isCompleted {
    return _fIsCompleted = _fIsCompleted ??
        SqlSyntax.setField(_fIsCompleted, 'isCompleted', DbType.bool);
  }

  static TableField? _fAllDayTask;
  static TableField get allDayTask {
    return _fAllDayTask = _fAllDayTask ??
        SqlSyntax.setField(_fAllDayTask, 'allDayTask', DbType.bool);
  }

  static TableField? _fCreatedDate;
  static TableField get createdDate {
    return _fCreatedDate = _fCreatedDate ??
        SqlSyntax.setField(_fCreatedDate, 'createdDate', DbType.datetime);
  }

  static TableField? _fUpdatedDate;
  static TableField get updatedDate {
    return _fUpdatedDate = _fUpdatedDate ??
        SqlSyntax.setField(_fUpdatedDate, 'updatedDate', DbType.datetime);
  }

  static TableField? _fPersonId;
  static TableField get personId {
    return _fPersonId = _fPersonId ??
        SqlSyntax.setField(_fPersonId, 'personId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TaskFields

//region TaskManager
class TaskManager extends SqfEntityProvider {
  TaskManager()
      : super(TaskModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tasks';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TaskManager
// region Reminder
class Reminder extends TableBase {
  Reminder(
      {this.id,
      this.reminderDate,
      this.reminderType,
      this.createdDate,
      this.updatedDate,
      this.taskId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Reminder.withFields(this.reminderDate, this.reminderType, this.createdDate,
      this.updatedDate, this.taskId, this.isDeleted) {
    _setDefaultValues();
  }
  Reminder.withId(this.id, this.reminderDate, this.reminderType,
      this.createdDate, this.updatedDate, this.taskId, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Reminder.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['reminderDate'] != null) {
      reminderDate = int.tryParse(o['reminderDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['reminderDate'].toString())!)
          : DateTime.tryParse(o['reminderDate'].toString());
    }
    if (o['reminderType'] != null) {
      reminderType = int.tryParse(o['reminderType'].toString());
    }
    if (o['createdDate'] != null) {
      createdDate = int.tryParse(o['createdDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdDate'].toString())!)
          : DateTime.tryParse(o['createdDate'].toString());
    }
    if (o['updatedDate'] != null) {
      updatedDate = int.tryParse(o['updatedDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedDate'].toString())!)
          : DateTime.tryParse(o['updatedDate'].toString());
    }
    taskId = int.tryParse(o['taskId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plTask = o['task'] != null
        ? Task.fromMap(o['task'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Reminder)
  int? id;
  DateTime? reminderDate;
  int? reminderType;
  DateTime? createdDate;
  DateTime? updatedDate;
  int? taskId;
  bool? isDeleted;

  // end FIELDS (Reminder)

// RELATIONSHIPS (Reminder)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTask', 'plField2'..]) or so on..
  Task? plTask;

  /// get Task By TaskId
  Future<Task?> getTask(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Task()
        .getById(taskId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Reminder)

  static const bool _softDeleteActivated = true;
  ReminderManager? __mnReminder;

  ReminderManager get _mnReminder {
    return __mnReminder = __mnReminder ?? ReminderManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (reminderDate != null) {
      map['reminderDate'] = forJson
          ? reminderDate!.toString()
          : forQuery
              ? reminderDate!.millisecondsSinceEpoch
              : reminderDate;
    } else if (reminderDate != null || !forView) {
      map['reminderDate'] = null;
    }
    if (reminderType != null || !forView) {
      map['reminderType'] = reminderType;
    }
    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    } else if (createdDate != null || !forView) {
      map['createdDate'] = null;
    }
    if (updatedDate != null) {
      map['updatedDate'] = forJson
          ? updatedDate!.toString()
          : forQuery
              ? updatedDate!.millisecondsSinceEpoch
              : updatedDate;
    } else if (updatedDate != null || !forView) {
      map['updatedDate'] = null;
    }
    if (taskId != null) {
      map['taskId'] = forView
          ? plTask == null
              ? taskId
              : plTask!.title
          : taskId;
    } else if (taskId != null || !forView) {
      map['taskId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (reminderDate != null) {
      map['reminderDate'] = forJson
          ? reminderDate!.toString()
          : forQuery
              ? reminderDate!.millisecondsSinceEpoch
              : reminderDate;
    } else if (reminderDate != null || !forView) {
      map['reminderDate'] = null;
    }
    if (reminderType != null || !forView) {
      map['reminderType'] = reminderType;
    }
    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    } else if (createdDate != null || !forView) {
      map['createdDate'] = null;
    }
    if (updatedDate != null) {
      map['updatedDate'] = forJson
          ? updatedDate!.toString()
          : forQuery
              ? updatedDate!.millisecondsSinceEpoch
              : updatedDate;
    } else if (updatedDate != null || !forView) {
      map['updatedDate'] = null;
    }
    if (taskId != null) {
      map['taskId'] = forView
          ? plTask == null
              ? taskId
              : plTask!.title
          : taskId;
    } else if (taskId != null || !forView) {
      map['taskId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Reminder]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Reminder]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      reminderDate != null ? reminderDate!.millisecondsSinceEpoch : null,
      reminderType,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
      taskId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      reminderDate != null ? reminderDate!.millisecondsSinceEpoch : null,
      reminderType,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
      taskId,
      isDeleted
    ];
  }

  static Future<List<Reminder>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Reminder.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Reminder>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Reminder>[];
    try {
      objList = list
          .map((reminder) => Reminder.fromMap(reminder as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Reminder.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Reminder>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Reminder> objList = <Reminder>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Reminder.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTask'))) {
          obj.plTask =
              obj.plTask ?? await obj.getTask(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Reminder by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Reminder] if exist, otherwise returns null
  Future<Reminder?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Reminder? obj;
    final data = await _mnReminder.getById([id]);
    if (data.length != 0) {
      obj = Reminder.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTask'))) {
          obj.plTask =
              obj.plTask ?? await obj.getTask(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Reminder) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnReminder.insert(this, ignoreBatch);
    } else {
      await _mnReminder.update(this);
    }

    return id;
  }

  /// Saves the (Reminder) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnReminder.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnReminder.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Reminder. Returns a new Primary Key value of Reminder

  /// <returns>Returns a new Primary Key value of Reminder
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Reminder> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Reminder> reminders,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await TaskModel().batchStart();
    for (final obj in reminders) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await TaskModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < reminders.length; i++) {
        if (reminders[i].id == null) {
          reminders[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnReminder.rawInsert(
          'INSERT OR REPLACE INTO reminders (id, reminderDate, reminderType, createdDate, updatedDate, taskId,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            reminderDate != null ? reminderDate!.millisecondsSinceEpoch : null,
            reminderType,
            createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
            updatedDate != null ? updatedDate!.millisecondsSinceEpoch : null,
            taskId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Reminder id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Reminder id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Reminder Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Reminder>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Reminder> reminders,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnReminder.rawInsertAll(
        'INSERT OR REPLACE INTO reminders (id, reminderDate, reminderType, createdDate, updatedDate, taskId,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        reminders,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Reminder

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Reminder invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnReminder
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnReminder.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Reminder

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Reminder invoked (id=$id)');
    {
      return _mnReminder.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  ReminderFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ReminderFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ReminderFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ReminderFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    taskId = taskId ?? 1;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion reminder

// region ReminderField
class ReminderField extends FilterBase {
  ReminderField(ReminderFilterBuilder reminderFB) : super(reminderFB);

  @override
  ReminderFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder isNull() {
    return super.isNull() as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ReminderFilterBuilder;
  }

  @override
  ReminderField get not {
    return super.not as ReminderField;
  }
}
// endregion ReminderField

// region ReminderFilterBuilder
class ReminderFilterBuilder extends ConjunctionBase {
  ReminderFilterBuilder(Reminder obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnReminder = obj._mnReminder;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ReminderManager? _mnReminder;

  /// put the sql keyword 'AND'
  @override
  ReminderFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ReminderFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ReminderFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ReminderFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ReminderFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ReminderFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ReminderFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ReminderFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ReminderFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ReminderFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ReminderFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ReminderField _setField(ReminderField? field, String colName, DbType dbtype) {
    return ReminderField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ReminderField? _id;
  ReminderField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ReminderField? _reminderDate;
  ReminderField get reminderDate {
    return _reminderDate =
        _setField(_reminderDate, 'reminderDate', DbType.datetime);
  }

  ReminderField? _reminderType;
  ReminderField get reminderType {
    return _reminderType =
        _setField(_reminderType, 'reminderType', DbType.integer);
  }

  ReminderField? _createdDate;
  ReminderField get createdDate {
    return _createdDate =
        _setField(_createdDate, 'createdDate', DbType.datetime);
  }

  ReminderField? _updatedDate;
  ReminderField get updatedDate {
    return _updatedDate =
        _setField(_updatedDate, 'updatedDate', DbType.datetime);
  }

  ReminderField? _taskId;
  ReminderField get taskId {
    return _taskId = _setField(_taskId, 'taskId', DbType.integer);
  }

  ReminderField? _isDeleted;
  ReminderField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Reminder> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnReminder!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnReminder!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Reminder> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Reminder bulk invoked');
    return _mnReminder!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from reminders ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnReminder!.updateBatch(qparams, values);
  }

  /// This method always returns [Reminder] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Reminder?
  @override
  Future<Reminder?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnReminder!.toList(qparams);
    final data = await objFuture;
    Reminder? obj;
    if (data.isNotEmpty) {
      obj = Reminder.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTask'))) {
          obj.plTask =
              obj.plTask ?? await obj.getTask(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Reminder]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Reminder?
  @override
  Future<Reminder> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Reminder();
  }

  /// This method returns int. [Reminder]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? reminderCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final remindersFuture = await _mnReminder!.toList(qparams);
    final int count = remindersFuture[0]['CNT'] as int;
    if (reminderCount != null) {
      reminderCount(count);
    }
    return count;
  }

  /// This method returns List<Reminder> [Reminder]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Reminder>
  @override
  Future<List<Reminder>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Reminder> remindersData = await Reminder.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return remindersData;
  }

  /// This method returns Json String [Reminder]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Reminder]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Reminder]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnReminder!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Reminder]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM reminders WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnReminder!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Reminder]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnReminder!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Reminder.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnReminder!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ReminderFilterBuilder

// region ReminderFields
class ReminderFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fReminderDate;
  static TableField get reminderDate {
    return _fReminderDate = _fReminderDate ??
        SqlSyntax.setField(_fReminderDate, 'reminderDate', DbType.datetime);
  }

  static TableField? _fReminderType;
  static TableField get reminderType {
    return _fReminderType = _fReminderType ??
        SqlSyntax.setField(_fReminderType, 'reminderType', DbType.integer);
  }

  static TableField? _fCreatedDate;
  static TableField get createdDate {
    return _fCreatedDate = _fCreatedDate ??
        SqlSyntax.setField(_fCreatedDate, 'createdDate', DbType.datetime);
  }

  static TableField? _fUpdatedDate;
  static TableField get updatedDate {
    return _fUpdatedDate = _fUpdatedDate ??
        SqlSyntax.setField(_fUpdatedDate, 'updatedDate', DbType.datetime);
  }

  static TableField? _fTaskId;
  static TableField get taskId {
    return _fTaskId =
        _fTaskId ?? SqlSyntax.setField(_fTaskId, 'taskId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ReminderFields

//region ReminderManager
class ReminderManager extends SqfEntityProvider {
  ReminderManager()
      : super(TaskModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'reminders';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ReminderManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await TaskModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await TaskModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await TaskModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class TaskModelSequenceManager extends SqfEntityProvider {
  TaskModelSequenceManager() : super(TaskModel());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// BEGIN CONTROLLER (Person)

class PersonController extends Person {
  String formListTitleField = 'firstName';
  String formListSubTitleField = 'lastName';
  static SQFViewList getController = SQFViewList(
    PersonController(),
    primaryKeyName: 'personId',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return PersonAdd(obj == null
        ? Person()
        : await Person().getById(obj['personId'] as int) ?? Person());
  }
}
// END CONTROLLER (Person)

// END OF CONTROLLERS
